var searchIndex = JSON.parse('{\
"andrew":{"doc":"Andrew is a crate for drawing objects","i":[[3,"Canvas","andrew","The canvas object acts as a wrapper around a buffer,…",null,null],[12,"buffer","","A buffer for the canvas to draw to",0,null],[12,"width","","The width in pixels of the canvas",0,null],[12,"height","","The height in pixels of the canvas",0,null],[12,"stride","","The number of bytes between each line of pixels on the…",0,null],[12,"pixel_size","","The number of bytes contained in each pixel",0,null],[12,"endianness","","The endianness of the canvas",0,null],[4,"Endian","","Describes an endianness (aka byte order)",null,null],[13,"Little","","Little Endian",1,null],[13,"Big","","Big Endian",1,null],[0,"line","","A module that contains functions and objects relating to…",null,null],[3,"Line","andrew::line","A drawable object that represents a line",null,null],[12,"pt1","","The first point of the line",2,null],[12,"pt2","","The second point of the line",2,null],[12,"color","","The color of the line",2,null],[12,"antialiased","","Decides whether the line will be antialiased",2,null],[11,"new","","Creates a new Line object",2,[[],["line",3]]],[0,"shapes","andrew","A module that contains functions and objects relating to…",null,null],[0,"rectangle","andrew::shapes","A module that contains functions and objects relating to…",null,null],[3,"Sides","andrew::shapes::rectangle","The Sides bitflag presents the sides of a rectangle",null,null],[3,"Rectangle","","A drawable object that represents a rectangle",null,null],[12,"pos","","Position of the top-left corner of rectangle",3,null],[12,"size","","The size of the rectangle to be drawn, the border will be…",3,null],[12,"border","","The border that is drawn around the perimeter of the…",3,null],[12,"fill","","The color of the fill (area) of the rectangle",3,null],[18,"TOP","","The top side of the rectangle",4,null],[18,"BOTTOM","","The bottom side of the rectangle",4,null],[18,"LEFT","","The left side of the rectangle",4,null],[18,"RIGHT","","The right side of the rectangle",4,null],[18,"ALL","","All sides of the rectangle",4,null],[11,"empty","","Returns an empty set of flags",4,[[],["sides",3]]],[11,"all","","Returns the set containing all flags.",4,[[],["sides",3]]],[11,"bits","","Returns the raw value of the flags currently stored.",4,[[]]],[11,"from_bits","","Convert from underlying bit representation, unless that…",4,[[],[["option",4],["sides",3]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any…",4,[[],["sides",3]]],[11,"from_bits_unchecked","","Convert from underlying bit representation, preserving all…",4,[[],["sides",3]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",4,[[]]],[11,"is_all","","Returns `true` if all flags are currently set.",4,[[]]],[11,"intersects","","Returns `true` if there are flags common to both `self`…",4,[[["sides",3]]]],[11,"contains","","Returns `true` all of the flags in `other` are contained…",4,[[["sides",3]]]],[11,"insert","","Inserts the specified flags in-place.",4,[[["sides",3]]]],[11,"remove","","Removes the specified flags in-place.",4,[[["sides",3]]]],[11,"toggle","","Toggles the specified flags in-place.",4,[[["sides",3]]]],[11,"set","","Inserts or removes the specified flags depending on the…",4,[[["sides",3]]]],[11,"new","","Creates a new Rectangle object",3,[[["option",4],["option",4]],["rectangle",3]]],[0,"text","andrew","A module that contains functions and objects relating to…",null,null],[3,"Text","andrew::text","A drawable object that represents text",null,null],[12,"pos","","The position of the text on the canvas",5,null],[12,"color","","The color of the text",5,null],[12,"text","","The text that is rendered to the canvas on draw",5,null],[12,"font","","The font used in rendering the text",5,null],[12,"scale","","The scale that is applied to the text",5,null],[12,"v_metrics","","The vertical metrics of the text",5,null],[5,"load_font_file","","Loads a font file into a `Vec<u8>`",null,[[["into",8],["pathbuf",3]],["vec",3]]],[0,"fontconfig","","A module that contains functions and objects relating to…",null,null],[3,"FontConfig","andrew::text::fontconfig","Represents the main fontconfig config file",null,null],[11,"new","","Creates a new FontConfig object by looking for the…",6,[[],[["result",4],["fontconfig",3]]]],[11,"get_location","","Returns the location of the fontconfig config file being…",6,[[],["path",3]]],[11,"get_font_dirs","","Get the directories that contain fonts",6,[[],[["vec",3],["pathbuf",3]]]],[11,"get_fonts","","Return all fonts installed on the system",6,[[],[["error",3],["vec",3],["result",4]]]],[11,"get_font_dir_files","","Return all \'fonts.dir\' files in font directories",6,[[],[["error",3],["vec",3],["result",4]]]],[11,"get_regular_family_fonts","","Returns the paths of regular fonts belonging to a specific…",6,[[],[["error",3],["vec",3],["result",4]]]],[11,"new","andrew::text","Creates a new Text object",5,[[["string",3],["into",8]],["text",3]]],[11,"get_width","","Calculates the width in pixels of the text",5,[[]]],[8,"Drawable","andrew","The Drawable trait allows object to be drawn to a buffer…",null,null],[10,"draw","","A function that draws the object to a canvas",7,[[["canvas",3]]]],[11,"native","","Returns the native endianness",1,[[],["endian",4]]],[11,"new","","Creates a new canvas object",0,[[["endian",4]],["canvas",3]]],[11,"draw","","Draws an object that implements the Drawable trait to the…",0,[[]]],[11,"draw_point","","Draws a pixel at the x and y coordinate",0,[[]]],[11,"clear","","Clears the entire canvas buffer by zeroing it",0,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","andrew::line","",2,[[]]],[11,"into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","andrew::shapes::rectangle","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","andrew::text","",5,[[]]],[11,"into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","andrew::text::fontconfig","",6,[[]]],[11,"into","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"draw","andrew::line","",2,[[["canvas",3]]]],[11,"draw","andrew::shapes::rectangle","",3,[[["canvas",3]]]],[11,"draw","andrew::text","",5,[[["canvas",3]]]],[11,"extend","andrew::shapes::rectangle","",4,[[["intoiterator",8]]]],[11,"clone","","",4,[[],["sides",3]]],[11,"cmp","","",4,[[["sides",3]],["ordering",4]]],[11,"eq","","",4,[[["sides",3]]]],[11,"ne","","",4,[[["sides",3]]]],[11,"eq","andrew","",1,[[["endian",4]]]],[11,"partial_cmp","andrew::shapes::rectangle","",4,[[["sides",3]],[["option",4],["ordering",4]]]],[11,"lt","","",4,[[["sides",3]]]],[11,"le","","",4,[[["sides",3]]]],[11,"gt","","",4,[[["sides",3]]]],[11,"ge","","",4,[[["sides",3]]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","andrew","",1,[[["formatter",3]],["result",6]]],[11,"sub","andrew::shapes::rectangle","Returns the set difference of the two sets of flags.",4,[[["sides",3]],["sides",3]]],[11,"sub_assign","","Disables all flags enabled in the set.",4,[[["sides",3]]]],[11,"not","","Returns the complement of this set of flags.",4,[[],["sides",3]]],[11,"bitand","","Returns the intersection between the two sets of flags.",4,[[["sides",3]],["sides",3]]],[11,"bitor","","Returns the union of the two sets of flags.",4,[[["sides",3]],["sides",3]]],[11,"bitxor","","Returns the left flags, but with all the right flags…",4,[[["sides",3]],["sides",3]]],[11,"bitand_assign","","Disables all flags disabled in the set.",4,[[["sides",3]]]],[11,"bitor_assign","","Adds the set of flags.",4,[[["sides",3]]]],[11,"bitxor_assign","","Toggles the set of flags.",4,[[["sides",3]]]],[11,"hash","","",4,[[]]],[11,"from_iter","","",4,[[["intoiterator",8]],["sides",3]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]]],"p":[[3,"Canvas"],[4,"Endian"],[3,"Line"],[3,"Rectangle"],[3,"Sides"],[3,"Text"],[3,"FontConfig"],[8,"Drawable"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);